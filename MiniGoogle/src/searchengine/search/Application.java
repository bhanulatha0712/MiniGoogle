/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package searchengine.search;

import java.io.FileInputStream;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;
import java.util.Vector;
import searchengine.dictionary.ObjectIterator;
import searchengine.indexer.Indexer;

/**
 *
 * @author bhanu
 */


class Printi
{
    String ur;
    int freq;
    public Printi(String st,int num)
    {
        freq=num;
        ur=st;
    }
}



public class Application extends javax.swing.JFrame {

    /**
     * Creates new form Application
     */
    public Application() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        searcharea = new javax.swing.JTextField();
        Individual = new javax.swing.JButton();
        Intersection = new javax.swing.JButton();
        Union = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        URLarea = new javax.swing.JTextArea();
        Difference = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Search  Engine");

        jLabel2.setText("        Enter the arguments (filename dictionary keywords)");

        searcharea.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        searcharea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchareaActionPerformed(evt);
            }
        });

        Individual.setText("Search Individual words");
        Individual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IndividualActionPerformed(evt);
            }
        });

        Intersection.setText("Search Intersected URLs");
        Intersection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IntersectionActionPerformed(evt);
            }
        });

        Union.setText("Search Union URLs");
        Union.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UnionActionPerformed(evt);
            }
        });

        URLarea.setColumns(20);
        URLarea.setRows(5);
        jScrollPane1.setViewportView(URLarea);

        Difference.setText("Search Difference URLs");
        Difference.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DifferenceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(184, 184, 184)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(145, 145, 145)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Individual, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Intersection, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Union, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Difference, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(searcharea, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 568, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(61, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(searcharea, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Individual)
                    .addComponent(Intersection))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Union)
                    .addComponent(Difference))
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(73, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchareaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchareaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchareaActionPerformed

    private void IndividualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IndividualActionPerformed
                
        if(evt.getSource()==Individual)
        {
                String word=searcharea.getText();
                String[] argu=new String[20];
                //URLarea.setText(argu[15]);
               
                int k=0;
                for(int i=0;i<word.length();i++)
                {
                    if(word.charAt(i)==' ')
                    {
                        k++;
                        i++;
                    }
                    if(argu[k]==null)
                    {
                        argu[k]=""+word.charAt(i);
                    }
                    else
                    {
                    argu[k]+=word.charAt(i);
                    }
                }
                FileInputStream indexsource=null;
                try
                {
                    String uf=null;
                    Indexer w=null;
                    w=new Indexer("hash");
                    //System.out.println("we "+argu[0]+"end");
                    indexsource=new FileInputStream("b.txt");
                    w.restore(indexsource);
                    k=0;
                    Vector<String> ve=new Vector<String>();
                    while(argu[k]!=null)
                    {
                        ve.add(argu[k]);
                        k++;
                    }
                    ObjectIterator<?> i= w.retrievePages(new ObjectIterator<String>(ve),1);
                    
                    if(i!=null)
		{
			////////////////////////////////////////////////////////////////////
		    //  Write your Code here as part of Sorting based on Rank Assignment
		    //  
		    ///////////////////////////////////////////////////////////////////
			HashMap<String,Integer> hsh=null;
                        Printi pr;
                        while(i.hasNext())
                        {
                            int num;
                            hsh=(HashMap<String, Integer>) i.next();
                            Vector<Printi> vet=new Vector<Printi>();
                            
                            Set se=hsh.keySet();
                            Iterator itr=se.iterator();
                            while(itr.hasNext())
                            {
                                
                                String s=(String)itr.next();
                                num=hsh.get(s);
                                pr=new Printi(s,num);
                                vet.add(pr);
                            }
                            
                            //System.out.println(" THE URLS IN VECTOR ARE : "+ve.get(0).ur);
                            for(int j=0;j<vet.size();j++)
                            {
                                for(int t=0;t<(vet.size()-j-1);t++)
                                {
                                    
                                    
                                    if(((vet.get(t).freq)/(float)depth(vet.get(t).ur))<((vet.get(t+1).freq)/(float)depth(vet.get(t+1).ur)))
                                    {
                                        Printi check=vet.get(t);
                                        
                                        vet.set(t,vet.get(t+1));
                                        //ve.remove(t+1);
                                        vet.set(t+1,check);
                                        
                                    }
                                }
                            }
                            
                            System.out.println(" ****** THE URLS FOR THE WORD ARE ******** ");
                            
                            
                            for(int h=0;h<vet.size();h++)
                            {
                                System.out.println(" URL : "+vet.get(h).ur);
                                if(uf==null)
                                {
                                    uf=""+"URL: "+vet.get(h).ur+"\n";
                                }
                                else
                                {
                                uf+=("URL: "+vet.get(h).ur+"\n");
                                }
                                
                                //URLarea.setText("URL : "+vet.get(h).ur);
                            }
                                //URLarea.setText(uf);
                        }
                    
                        URLarea.setText(uf);
                        System.out.println("Search complete.");
			System.out.println("---------------\n");
		}
		else
		{
			System.out.println("Search complete.  0  hits found.");
		}
                    
                }
                catch(Exception e)
                {
                    System.out.println(" File name is invalid ");
                }
        }
                
    }//GEN-LAST:event_IndividualActionPerformed

    private void IntersectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IntersectionActionPerformed
      
        if(evt.getSource()==Intersection)
        {
                String word=searcharea.getText();
                String[] argu=new String[20];
                //URLarea.setText(argu[15]);
               
                int k=0;
                for(int i=0;i<word.length();i++)
                {
                    if(word.charAt(i)==' ')
                    {
                        k++;
                        i++;
                    }
                    if(argu[k]==null)
                    {
                        argu[k]=""+word.charAt(i);
                    }
                    else
                    {
                    argu[k]+=word.charAt(i);
                    }
                }
                FileInputStream indexsource=null;
                try
                {
                
                    Indexer w=null;
                    w=new Indexer("hash");
                    //System.out.println("we "+argu[0]+"end");
                    indexsource=new FileInputStream("b.txt");
                    w.restore(indexsource);
                    k=0;
                    Vector<String> ve=new Vector<String>();
                    while(argu[k]!=null)
                    {
                        ve.add(argu[k]);
                        k++;
                    }
                    ObjectIterator<?> i= w.retrievePages(new ObjectIterator<String>(ve),2);
                    
                    if(i!=null)
		{
			////////////////////////////////////////////////////////////////////
		    //  Write your Code here as part of Sorting based on Rank Assignment
		    //  
		    ///////////////////////////////////////////////////////////////////
			HashMap<String,Integer> hsh=null;
                        Printi pr;
                        while(i.hasNext())
                        {
                            int num;
                            hsh=(HashMap<String, Integer>) i.next();
                            Vector<Printi> vet=new Vector<Printi>();
                            
                            Set se=hsh.keySet();
                            Iterator itr=se.iterator();
                            while(itr.hasNext())
                            {
                                
                                String s=(String)itr.next();
                                num=hsh.get(s);
                                pr=new Printi(s,num);
                                vet.add(pr);
                            }
                            
                            //System.out.println(" THE URLS IN VECTOR ARE : "+ve.get(0).ur);
                            for(int j=0;j<vet.size();j++)
                            {
                                for(int t=0;t<(vet.size()-j-1);t++)
                                {
                                    
                                    
                                    if(((vet.get(t).freq)/(float)depth(vet.get(t).ur))<((vet.get(t+1).freq)/(float)depth(vet.get(t+1).ur)))
                                    {
                                        Printi check=vet.get(t);
                                        
                                        vet.set(t,vet.get(t+1));
                                        //ve.remove(t+1);
                                        vet.set(t+1,check);
                                        
                                    }
                                }
                            }
                            
                            System.out.println(" ****** THE URLS FOR THE WORD ARE ******** ");
                            
                            String uf=null;
                            for(int h=0;h<vet.size();h++)
                            {
                                System.out.println(" URL : "+vet.get(h).ur);
                                if(uf==null)
                                {
                                    uf=""+"URL: "+vet.get(h).ur+"\n";
                                }
                                else
                                {
                                uf+=("URL: "+vet.get(h).ur+"\n");
                                }
                                
                                //URLarea.setText("URL : "+vet.get(h).ur);
                            }
                                URLarea.setText(uf);
                        }
                    
                    
                        System.out.println("Search complete.");
			System.out.println("---------------\n");
		}
		else
		{
			System.out.println("Search complete.  0  hits found.");
		}
                    
                }
                catch(Exception e)
                {
                    System.out.println(" File name is invalid ");
                }
        }

                    // TODO add your handling code here:
    }//GEN-LAST:event_IntersectionActionPerformed

    private void DifferenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DifferenceActionPerformed
       
        if(evt.getSource()==Difference)
        {
                String word=searcharea.getText();
                String[] argu=new String[20];
                //URLarea.setText(argu[15]);
               
                int k=0;
                for(int i=0;i<word.length();i++)
                {
                    if(word.charAt(i)==' ')
                    {
                        k++;
                        i++;
                    }
                    if(argu[k]==null)
                    {
                        argu[k]=""+word.charAt(i);
                    }
                    else
                    {
                    argu[k]+=word.charAt(i);
                    }
                }
                FileInputStream indexsource=null;
                try
                {
                
                    Indexer w=null;
                    w=new Indexer("hash");
                    //System.out.println("we "+argu[0]+"end");
                    indexsource=new FileInputStream("b.txt");
                    w.restore(indexsource);
                    k=0;
                    Vector<String> ve=new Vector<String>();
                    while(argu[k]!=null)
                    {
                        ve.add(argu[k]);
                        k++;
                    }
                    ObjectIterator<?> i= w.retrievePages(new ObjectIterator<String>(ve),4);
                    
                    if(i!=null)
		{
			////////////////////////////////////////////////////////////////////
		    //  Write your Code here as part of Sorting based on Rank Assignment
		    //  
		    ///////////////////////////////////////////////////////////////////
			HashMap<String,Integer> hsh=null;
                        Printi pr;
                        while(i.hasNext())
                        {
                            int num;
                            hsh=(HashMap<String, Integer>) i.next();
                            Vector<Printi> vet=new Vector<Printi>();
                            
                            Set se=hsh.keySet();
                            Iterator itr=se.iterator();
                            while(itr.hasNext())
                            {
                                
                                String s=(String)itr.next();
                                num=hsh.get(s);
                                pr=new Printi(s,num);
                                vet.add(pr);
                            }
                            
                            //System.out.println(" THE URLS IN VECTOR ARE : "+ve.get(0).ur);
                            for(int j=0;j<vet.size();j++)
                            {
                                for(int t=0;t<(vet.size()-j-1);t++)
                                {
                                    
                                    
                                    if(((vet.get(t).freq)/(float)depth(vet.get(t).ur))<((vet.get(t+1).freq)/(float)depth(vet.get(t+1).ur)))
                                    {
                                        Printi check=vet.get(t);
                                        
                                        vet.set(t,vet.get(t+1));
                                        //ve.remove(t+1);
                                        vet.set(t+1,check);
                                        
                                    }
                                }
                            }
                            
                            System.out.println(" ****** THE URLS FOR THE WORD ARE ******** ");
                            
                            String uf=null;
                            for(int h=0;h<vet.size();h++)
                            {
                                System.out.println(" URL : "+vet.get(h).ur);
                                if(uf==null)
                                {
                                    uf=""+"URL: "+vet.get(h).ur+"\n";
                                }
                                else
                                {
                                uf+=("URL: "+vet.get(h).ur+"\n");
                                }
                                
                                //URLarea.setText("URL : "+vet.get(h).ur);
                            }
                                URLarea.setText(uf);
                        }
                    
                    
                        System.out.println("Search complete.");
			System.out.println("---------------\n");
		}
		else
		{
			System.out.println("Search complete.  0  hits found.");
		}
                    
                }
                catch(Exception e)
                {
                    System.out.println(" File name is invalid ");
                }
        }

        
        
        // TODO add your handling code here:
    }//GEN-LAST:event_DifferenceActionPerformed

    private void UnionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UnionActionPerformed
       
        if(evt.getSource()==Union)
        {
                String word=searcharea.getText();
                String[] argu=new String[20];
                //URLarea.setText(argu[15]);
               
                int k=0;
                for(int i=0;i<word.length();i++)
                {
                    if(word.charAt(i)==' ')
                    {
                        k++;
                        i++;
                    }
                    if(argu[k]==null)
                    {
                        argu[k]=""+word.charAt(i);
                    }
                    else
                    {
                    argu[k]+=word.charAt(i);
                    }
                }
                FileInputStream indexsource=null;
                try
                {
                
                    Indexer w=null;
                    w=new Indexer("hash");
                    //System.out.println("we "+argu[0]+"end");
                    indexsource=new FileInputStream("b.txt");
                    w.restore(indexsource);
                    k=0;
                    Vector<String> ve=new Vector<String>();
                    while(argu[k]!=null)
                    {
                        ve.add(argu[k]);
                        k++;
                    }
                    ObjectIterator<?> i= w.retrievePages(new ObjectIterator<String>(ve),3);
                    
                    if(i!=null)
		{
			////////////////////////////////////////////////////////////////////
		    //  Write your Code here as part of Sorting based on Rank Assignment
		    //  
		    ///////////////////////////////////////////////////////////////////
			HashMap<String,Integer> hsh=null;
                        Printi pr;
                        while(i.hasNext())
                        {
                            int num;
                            hsh=(HashMap<String, Integer>) i.next();
                            Vector<Printi> vet=new Vector<Printi>();
                            
                            Set se=hsh.keySet();
                            Iterator itr=se.iterator();
                            while(itr.hasNext())
                            {
                                
                                String s=(String)itr.next();
                                num=hsh.get(s);
                                pr=new Printi(s,num);
                                vet.add(pr);
                            }
                            
                            //System.out.println(" THE URLS IN VECTOR ARE : "+ve.get(0).ur);
                            for(int j=0;j<vet.size();j++)
                            {
                                for(int t=0;t<(vet.size()-j-1);t++)
                                {
                                    
                                    
                                    if(((vet.get(t).freq)/(float)depth(vet.get(t).ur))<((vet.get(t+1).freq)/(float)depth(vet.get(t+1).ur)))
                                    {
                                        Printi check=vet.get(t);
                                        
                                        vet.set(t,vet.get(t+1));
                                        //ve.remove(t+1);
                                        vet.set(t+1,check);
                                        
                                    }
                                }
                            }
                            
                            System.out.println(" ****** THE URLS FOR THE WORD ARE ******** ");
                            
                            String uf=null;
                            for(int h=0;h<vet.size();h++)
                            {
                                System.out.println(" URL : "+vet.get(h).ur);
                                if(uf==null)
                                {
                                    uf=""+"URL: "+vet.get(h).ur+"\n";
                                }
                                else
                                {
                                uf+=("URL: "+vet.get(h).ur+"\n");
                                }
                                
                                //URLarea.setText("URL : "+vet.get(h).ur);
                            }
                                URLarea.setText(uf);
                        }
                    
                    
                        System.out.println("Search complete.");
			System.out.println("---------------\n");
		}
		else
		{
			System.out.println("Search complete.  0  hits found.");
		}
                    
                }
                catch(Exception e)
                {
                    System.out.println(" File name is invalid ");
                }
        }

        
        
        // TODO add your handling code here:
    }//GEN-LAST:event_UnionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Application().setVisible(true);
            }
        });
    }
    
    
    public static int depth(String str)
        {
            char[] c;
            int count=0;
            for(int p=0;p<str.length();p++)
            {
                if(str.charAt(p)=='/')
                {
                    count++;
                }
            }
                return count-1;
        }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Difference;
    private javax.swing.JButton Individual;
    private javax.swing.JButton Intersection;
    private javax.swing.JTextArea URLarea;
    private javax.swing.JButton Union;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField searcharea;
    // End of variables declaration//GEN-END:variables
}
